# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Model/AuditLog/Entity/'
            - '../src/Model/User/Entity/'
            - '../src/Model/ControlPanel/Entity/'
#            - '../src/migrations/'
            - '../src/Kernel.php'

    #for autowiring Entity Repositories
    App\Model\AuditLog\Entity\AuditLogRepository: ~

    App\Model\User\Entity\User\UserRepository: ~

    App\Model\ControlPanel\Entity\Location\LocationRepository: ~
    App\Model\ControlPanel\Entity\Package\PackageRepository: ~
    App\Model\ControlPanel\Entity\Package\VirtualMachine\VirtualMachinePackageRepository: ~
    App\Model\ControlPanel\Entity\Panel\SolidCP\EnterpriseDispatcher\EnterpriseDispatcherRepository: ~
    App\Model\ControlPanel\Entity\Panel\SolidCP\Node\SolidcpServerRepository: ~
    App\Model\ControlPanel\Entity\Panel\SolidCP\HostingSpace\SolidcpHostingSpaceRepository: ~


    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
#    App\Controller\: TODO not need anymore?
#        resource: '../src/Controller/'
#        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Twig\Widget\:
        resource: '../src/Twig/Widget'
        tags: [ 'twig.extension' ]

    App\Twig\Menu\NavbarMenu:
        tags:
            - { name: knp_menu.menu_builder, method: build, alias: navbar }

    #https://rihards.com/2018/symfony-login-event-listener/
    App\Event\Listener\Security\LoginListener:
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }
            - { name: kernel.event_listener, event: Symfony\Component\Security\Http\Event\LoginFailureEvent, method: onAuthenticationFailure }

    #https://github.com/lexik/LexikJWTAuthenticationBundle/blob/2.x/Resources/doc/2-data-customization.md#adding-custom-data-or-headers-to-the-jwt
    #add custom fields for a JWT token
    App\Event\Listener\Security\JWTCreatedListener:
        #class: App\Event\Listener\Security\JWTCreatedListener
        #arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    #used to check if an IP was changed and marking a token as invalid
    App\Event\Listener\Security\JWTDecodedListener:
        #class: App\Event\Listener\Security\JWTDecodedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }