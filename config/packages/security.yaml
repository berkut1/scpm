security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Security\UserIdentity:
            algorithm: auto
        # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        fetcher:
            id: App\Security\UserProvider
        jwt:
            lexik_jwt: #~ #https://github.com/lexik/LexikJWTAuthenticationBundle/blob/2.x/Resources/doc/8-jwt-user-provider.md
                class: App\Security\JWTUser
        #in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login: #this use only for json_login moved from main, because for API login need provider witch get query to a DB
            pattern: ^/api/login
            stateless: true
            #anonymous: true -> lazy: true?
            json_login:
                check_path: /api/login/authentication_token
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: fetcher #we use that provider for login only
        api:
            pattern: ^/api
#            anonymous: true
            stateless: true
            provider: jwt #this is a database-less user provider
            jwt: ~
#            custom_authenticators:
#                - lexik_jwt_authentication.jwt_token_authenticator
        main:
#            lazy: true
#            provider: users_in_memory
            #anonymous: true -> lazy: true?
            user_checker: App\Security\UserChecker
            provider: fetcher
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
            entry_point: App\Security\AuthenticationEntryPoint

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            form_login:
                login_path: app_login
                check_path: app_login
            logout:
                path: app_logout
#        secured_area:
#            form_login:
#                enable_csrf: true

    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_MODERATOR
        ROLE_MODERATOR:
            - ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/api/?$, roles: PUBLIC_ACCESS } #allow guests only root
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/login/authentication_token, roles: PUBLIC_ACCESS }
#        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, ips: [127.0.0.1, ::1, 172.19.1.1/24] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/login, roles: PUBLIC_ACCESS }
#        - { path: ^/, roles: ROLE_USER, ips: [127.0.0.1, ::1, 172.19.1.1/24] }
        - { path: ^/, roles: ROLE_USER }
        - { path: ^/, roles: ROLE_NO_ACCESS } #ROLE_NO_ACCESS is not existed role with is a trick to always deny access if other rule not math
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
